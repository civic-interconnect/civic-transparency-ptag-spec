# .github/workflows/ci.yml
name: PTag Spec CI (Lint, Test, Coverage)
# DESIGN PRINCIPLES:
# - CI VALIDATES, never generates - all types are already committed
# - Scope naming (Assemble/Baseline/Coverage/Deploy) reinforces CI/CD patterns
# - Compatibility matrix tests multiple Python versions
# - Fail fast design - catch issues before they reach release
#
# DEVELOPER WORKFLOW:
# 1. uv sync --extra dev --extra docs --upgrade
# 2. uv run ruff check . --fix
# 3. uv run ruff format .
# 4. uv run pre-commit run --all-files
# 5. uv run -m pytest -q
# 6. Push - CI validates everything works correctly
#
# CI PHASES:
# - Assemble: Install dependencies, verify environment setup
# - Baseline: Core validation (types exist, lint passes, tests pass)
# - Coverage: Generate reports and upload artifacts
# - Deploy: Build package and docs (sanity checks for release readiness)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
  workflow_call:

env:
  PYTHONUNBUFFERED: "1"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  compatibility-matrix:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        python-version: ["3.12", "3.13"]
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      - name: Setup Python ${{ matrix.python-version }}
        run: |
          uv python install ${{ matrix.python-version }}
          uv venv .venv --python ${{ matrix.python-version }}

      - name: Assemble. Install dependencies with uv sync
        run: uv sync --extra dev --extra docs

      - name: Baseline. Ruff lint check
        run: uv run ruff check .

      - name: Validate. JSON Schema validation
        run: |
          uv run check-jsonschema --schemafile https://json-schema.org/draft/2020-12/schema src/ci/transparency/ptag/spec/schemas/*.schema.json

      - name: Baseline. Run tests
        run: uv run -m pytest -q

      - name: Coverage. Generate summary
        run: uv run python .github/scripts/coverage_summary.py

      - name: Coverage. Build HTML
        run: uv run -m coverage html

      - name: Coverage. Combine and Upload Reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-${{ matrix.python-version }}
          path: |
            coverage.xml
            htmlcov/
          overwrite: true

      - name: Deploy. Build docs (sanity check)
        run: uv run mkdocs build --strict

{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Civic Transparency PTag Specification","text":"<p>Welcome to the Civic Transparency PTag Spec. This site hosts normative JSON Schemas, OpenAPI definitions, and supporting docs.</p> <ul> <li>See Specs for the normative definitions.</li> <li>See Guide for usage patterns and worked examples.</li> <li>See API for typed reference documentation.</li> </ul>"},{"location":"privacy/","title":"Privacy Principles","text":"<p>This specification is privacy-first:</p> <ul> <li>k-anonymity (k \u2265 100): Aggregations are only exposed when large enough.</li> <li>No content, no IDs: Only behavioral metadata is modeled.</li> <li>Bucketed values: Account age, automation flags, and client families are categorical.</li> <li>Daily-salted hashes: Duplicate detection hashes rotate daily to prevent cross-dataset correlation</li> <li>Geographic limits: At most country-level, or large subdivisions (\u22651M population).</li> </ul>"},{"location":"privacy/#guiding-principles","title":"Guiding Principles","text":"<ol> <li> <p>No personal data.    The system does not collect or expose account IDs, handles, user names, or message text.</p> </li> <li> <p>Bucketed fields.    Potentially sensitive attributes (e.g., account age, follower count) are reported only in broad, non-identifying ranges.</p> </li> <li> <p>Aggregate-only outputs.    All metrics are computed across large groups; no individual-level records are exposed.</p> </li> <li> <p>Minimum group size thresholds.    Public outputs are only generated when <code>k-anonymity \u2265 100</code> is satisfied, reducing re-identification risk.</p> </li> <li> <p>No cross-platform joins.    Schema design avoids linkable identifiers across platforms, making external joining infeasible.</p> </li> </ol>"},{"location":"privacy/#built-in-safeguards","title":"Built-in Safeguards","text":"<ul> <li> <p>Small-count suppression.   Metrics for small groups are suppressed to prevent triangulation attacks.</p> </li> <li> <p>Raw-post decoupling.   Public outputs are derived from aggregate computations, not individual post logs.</p> </li> <li> <p>Internal-only provenance tags.   Tags are used to compute trends and coordination patterns, but never exposed at the individual post level.</p> </li> </ul>"},{"location":"privacy/#legal-ethical-compliance","title":"Legal &amp; Ethical Compliance","text":"<ul> <li> <p>Privacy-aligned.   Meets the intent of privacy regulations such as the GDPR, CCPA, and other global standards.</p> </li> <li> <p>Transparency-compliant.   Enables platforms to meet obligations under emerging transparency laws (e.g., the EU Digital Services Act) without revealing personally identifiable information.</p> </li> </ul>"},{"location":"usage/","title":"Usage","text":"<p>You can consume this specification in two main ways:</p> <ol> <li>Schemas - Direct JSON Schema / OpenAPI validation.</li> <li>Typed Packages - Install language bindings generated from these schemas.</li> </ol>"},{"location":"usage/#example-python","title":"Example (Python)","text":"<pre><code>from ci.transparency.types import Series, ProvenanceTag\n\ntag = ProvenanceTag(\n    acct_age_bucket=\"1-6m\",\n    acct_type=\"person\",\n    automation_flag=\"manual\",\n    post_kind=\"original\",\n    client_family=\"mobile\",\n    media_provenance=\"hash_only\",\n    dedup_hash=\"a1b2c3d4\"\n)\n\nseries = Series(\n    topic=\"#LocalElection\",\n    generated_at=\"2025-01-15T12:00:00Z\",\n    interval=\"minute\",\n    points=[]\n)\n</code></pre> <p>See Guide for more.</p>"},{"location":"api/types/","title":"Types API","text":"<p>The PTag types are provided in several languages.</p> <p>See:</p> <ul> <li>civic-transparency-py-ptag-types - Typed Python models auto-generated from these schemas.</li> <li>civic-transparency-go-ptag-types - Go structs from schemas (Go module).</li> <li>civic-transparency-js-ptag-types - TypeScript typings (npm, @civic-interconnect/ptag-types).</li> </ul>"},{"location":"guide/enums/","title":"Guide: Enums","text":"<p>These enums are defined by the schemas.</p>"},{"location":"guide/enums/#provenance-tag-enums","title":"Provenance Tag Enums","text":"<p>(see Provenance Tag (Schema))</p> <ul> <li>AcctAge: <code>0-7d</code>, <code>8-30d</code>, <code>1-6m</code>, <code>6-24m</code>, <code>24m+</code></li> <li>AcctType: <code>person</code>, <code>org</code>, <code>media</code>, <code>public_official</code>, <code>unverified</code>, <code>declared_automation</code></li> <li>AutomationFlag: <code>manual</code>, <code>scheduled</code>, <code>api_client</code>, <code>declared_bot</code></li> <li>PostKind: <code>original</code>, <code>reshare</code>, <code>quote</code>, <code>reply</code></li> <li>ClientFamily: <code>web</code>, <code>mobile</code>, <code>third_party_api</code></li> <li>MediaProvenance: <code>c2pa_present</code>, <code>hash_only</code>, <code>none</code></li> </ul>"},{"location":"guide/enums/#series-enums","title":"Series Enums","text":"<p>(see Series (Schema))</p> <ul> <li>Interval: <code>minute</code>, <code>5-minute</code>, <code>15-minute</code>, <code>hour</code> (default: <code>5-minute</code>)</li> </ul>"},{"location":"guide/series/","title":"Guide: Series","text":"<p>A SeriesDoc represents an aggregated time series of provenance-tagged activity.</p>"},{"location":"guide/series/#creating-a-series-python","title":"Creating a Series (Python)","text":"<pre><code>from ci.transparency.types import Series\n\nseries = Series(\n    topic=\"#Election2026\",\n    generated_at=\"2026-02-07T00:00:00Z\",\n    interval=\"5-minute\",  # Default; also: \"minute\", \"15-minute\", \"hour\"\n    points=[]\n)\n</code></pre>"},{"location":"guide/series/#validating","title":"Validating","text":"<pre><code>from pydantic import ValidationError\n\ntry:\n    Series.model_validate(data)\nexcept ValidationError as e:\n    print(\"Invalid Series:\", e)\n</code></pre>"},{"location":"specs/","title":"Schema Index (Draft / Normative Artifacts)","text":"<p>This page lists draft machine-readable schemas for the Civic Transparency specification.</p> <p>Normative, human-readable explanations live in:</p> <ul> <li>PTag (Schema) (informative)</li> <li>PTag Series (Schema) (informative)</li> <li>PTag Transparency API (informative)</li> </ul>"},{"location":"specs/#provenance-privacy-notes","title":"Provenance &amp; Privacy Notes","text":"<ul> <li>Signals only: All values are behavioral, not textual.</li> <li>Minimum group size: Enforced at the API layer (e.g., <code>k \u2265 100</code>).</li> <li>PII-free by design: See Privacy for k-anonymity and aggregation safeguards.</li> </ul>"},{"location":"specs/#json-schema","title":"JSON Schema","text":"<p>Each schema is self-contained and versioned.</p> <ul> <li> <p>ProvenanceTag <code>$id</code>: <code>https://civic-interconnect.github.io/civic-transparency-ptag-spec/en/spec/schemas/ptag.schema.json</code>   File: <code>spec/schemas/ptag.schema.json</code></p> </li> <li> <p>SeriesDoc <code>$id</code>: <code>https://civic-interconnect.github.io/civic-transparency-ptag-spec/en/spec/schemas/ptag_series.schema.json</code>   File: <code>spec/schemas/ptag_series.schema.json</code></p> </li> </ul>"},{"location":"specs/#openapi","title":"OpenAPI","text":"<ul> <li>Transparency API   File: <code>spec/schemas/ptag_api.openapi.yaml</code>   All responses must validate against the JSON Schemas above.</li> </ul>"},{"location":"specs/#versioning-conformance","title":"Versioning &amp; Conformance","text":"<ul> <li>Schemas follow semantic versioning:</li> <li>MAJOR = breaking</li> <li>MINOR = additive</li> <li>PATCH = clarifying</li> <li>Clients must pin to a specific version and validate before ingesting.</li> <li>Changes and deprecations are documented in <code>CHANGELOG.md</code>.</li> </ul>"},{"location":"specs/#code-generation-informative","title":"Code Generation (informative)","text":"<p>You can generate typed clients from the JSON Schemas.</p> <pre><code># Example (Python + Pydantic)\ndatamodel-code-generator \\\n  --input spec/schemas/ptag_series.schema.json \\\n  --input-file-type jsonschema \\\n  --output src/ci/transparency/types/ptag_series.py\n</code></pre>"},{"location":"specs/ptag/","title":"Provenance Tag (Schema)","text":"<p>Schema: <code>ptag.schema.json</code></p> <p>Defines per-post provenance tags - categorical, privacy-preserving signals used only for aggregation.</p> <ul> <li>Enums: See Guide \u2192 Enums for canonical values (AcctAge, AutomationFlag, etc.).</li> <li>Privacy: See Privacy for guarantees and thresholds.</li> </ul> <p>Key fields (bucketed / categorical): - <code>acct_age_bucket</code>, <code>acct_type</code>, <code>automation_flag</code>, <code>post_kind</code>, <code>client_family</code>, <code>media_provenance</code>, <code>origin_hint</code>, <code>dedup_hash</code></p> <p>Status: Human-readable overview. Normative definition: JSON Schema at <code>src/ci/transparency/ptag/spec/schemas/ptag.schema.json</code></p>"},{"location":"specs/ptag_api/","title":"Transparency API","text":"<p>OpenAPI: <code>ptag_api.openapi.yaml</code></p> <p>Defines the REST API for retrieving aggregated transparency data.</p> <p>Primary endpoint - <code>/transparency/v1/aggregate</code> - Get aggregated behavior series</p> <p>Conformance - All responses MUST validate against the JSON Schemas in <code>src/ci/transparency/ptag/spec/schemas/*.schema.json</code> - Privacy: See Privacy (k-anonymity, suppression)</p> <p>Normative definition: OpenAPI at <code>src/ci/transparency/ptag/spec/schemas/ptag_api.openapi.yaml</code></p>"},{"location":"specs/ptag_series/","title":"Series (Schema)","text":"<p>Schema: <code>ptag_series.schema.json</code></p> <p>Defines an aggregated time series of provenance-tag-derived metrics.</p> <ul> <li>Each document is a SeriesDoc</li> <li>Each time bucket is a SeriesPoint</li> <li> <p>Includes coordination signals</p> </li> <li> <p>Enums: See Guide \u2192 Enums (e.g., <code>Interval</code>)</p> </li> <li>Privacy: See Privacy</li> </ul> <p>Structure: - <code>topic</code>, <code>generated_at</code>, <code>interval</code>, <code>points[]</code></p> <p>Per-point data: - Timestamp: <code>interval_start</code> (ISO 8601 UTC) - Basic metrics: <code>volume</code>, <code>reshare_ratio</code>, <code>recycled_content_rate</code> - Distributions: <code>acct_age_mix</code>, <code>automation_mix</code>, <code>client_mix</code> - Coordination signals: <code>burst_score</code>, <code>synchrony_index</code>, <code>duplication_clusters</code></p> <p>Normative definition: JSON Schema at <code>src/ci/transparency/ptag/spec/schemas/ptag_series.schema.json</code></p>"}]}